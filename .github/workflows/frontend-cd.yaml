name: 'Frontend Continuous Deployment'
on:
  push:
    branches:
      - 'main'
    # paths:
    #   - 'starter/frontend/**'
  #workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npx eslint --fix .

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Test
        run: npm run test
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/frontend
    steps:
      - name: Check out the code to the runner
        uses: actions/checkout@v3

      - name: Use Node.js 
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: ${{github.workspace}}/starter/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      # - name: Build Docker image
      #   run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .
      
      # - name: Run Docker image
      #   run: docker run --name mp-frontend -p 3000:3000 -d mp-frontend

      # - name: Stop the application
      #   run: docker stop mp-frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push an image to Elastic Container Registry
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: mppk-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Set image tag to a latest version
        run: kustomize edit set image $REPOSITORY=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: mppk-frontend
          IMAGE_TAG: ${{ github.sha }}
        working-directory: starter/frontend/k8s

      - name: Apply the manifests to the cluster
        run: kustomize build | kubectl apply -f -
        working-directory: starter/frontend/k8s
